# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import counters_pb2 as counters__pb2


class int_mapStub(object):
    """RPC to get map id and name on interface
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMaps = channel.unary_unary(
                '/counters.int_map/GetMaps',
                request_serializer=counters__pb2.MappacketRequest.SerializeToString,
                response_deserializer=counters__pb2.MappaketReply.FromString,
                )


class int_mapServicer(object):
    """RPC to get map id and name on interface
    """

    def GetMaps(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_int_mapServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMaps': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMaps,
                    request_deserializer=counters__pb2.MappacketRequest.FromString,
                    response_serializer=counters__pb2.MappaketReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'counters.int_map', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class int_map(object):
    """RPC to get map id and name on interface
    """

    @staticmethod
    def GetMaps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/counters.int_map/GetMaps',
            counters__pb2.MappacketRequest.SerializeToString,
            counters__pb2.MappaketReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class int_UpdateMapStub(object):
    """RPC to update map 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateMap = channel.unary_unary(
                '/counters.int_UpdateMap/UpdateMap',
                request_serializer=counters__pb2.UpdateMapRequest.SerializeToString,
                response_deserializer=counters__pb2.UpdateMapReply.FromString,
                )
        self.DeleteMap = channel.unary_unary(
                '/counters.int_UpdateMap/DeleteMap',
                request_serializer=counters__pb2.UpdateMapRequest.SerializeToString,
                response_deserializer=counters__pb2.UpdateMapReply.FromString,
                )


class int_UpdateMapServicer(object):
    """RPC to update map 
    """

    def UpdateMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_int_UpdateMapServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateMap': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMap,
                    request_deserializer=counters__pb2.UpdateMapRequest.FromString,
                    response_serializer=counters__pb2.UpdateMapReply.SerializeToString,
            ),
            'DeleteMap': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMap,
                    request_deserializer=counters__pb2.UpdateMapRequest.FromString,
                    response_serializer=counters__pb2.UpdateMapReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'counters.int_UpdateMap', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class int_UpdateMap(object):
    """RPC to update map 
    """

    @staticmethod
    def UpdateMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/counters.int_UpdateMap/UpdateMap',
            counters__pb2.UpdateMapRequest.SerializeToString,
            counters__pb2.UpdateMapReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/counters.int_UpdateMap/DeleteMap',
            counters__pb2.UpdateMapRequest.SerializeToString,
            counters__pb2.UpdateMapReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
